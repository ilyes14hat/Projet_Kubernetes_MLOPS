apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui-microservice
  labels:
    app: ui
spec:
  replicas: 1  # Adjust the number of replicas as needed
  selector:
    matchLabels:
      app: ui
  template:
    metadata:
      labels:
        app: ui
    spec:
      containers:
      - name: ui-container
        image: anismahmahi/front_micro_service:latest  # Replace with your actual Docker image and tag
        ports:
        - containerPort: 8501  # Adjust the port as needed
        # Add any environment variables or volume mounts if necessary
      # Add more containers or volumes if needed
---
apiVersion: v1
kind: Service
metadata:
  name: ui-service
spec:
  selector:
    app: ui
  ports:
    - protocol: TCP
      port: 80  # Expose the service on this port
      targetPort: 8501  # Forward traffic to this container port
  type: ClusterIP  # Use NodePort for external access
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: predict-microservice
  labels:
    app: predict
spec:
  replicas: 1  # Adjust the number of replicas as needed
  selector:
    matchLabels:
      app: predict
  template:
    metadata:
      labels:
        app: predict
    spec:
      containers:
      - name: predict-container
        image: anismahmahi/predict_micro_service:latest  # Replace with your actual Docker image and tag
        ports:
        - containerPort: 5000  # Adjust the port as needed
        # Add any environment variables or volume mounts if necessary
      # Add more containers or volumes if needed
---
apiVersion: v1
kind: Service
metadata:
  name: predict-service
spec:
  selector:
    app: predict
  ports:
    - protocol: TCP
      port: 5000  # Expose the service on this port
      targetPort: 5000  # Forward traffic to this container port
  type: ClusterIP  # Use NodePort, ClusterIP, or LoadBalancer as per your environment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: preprocess-microservice
  labels:
    app: preprocess
spec:
  replicas: 1  # Adjust the number of replicas as needed
  selector:
    matchLabels:
      app: preprocess
  template:
    metadata:
      labels:
        app: preprocess
    spec:
      containers:
      - name: preprocess-container
        image: anismahmahi/preprocess_micro_service:latest  # Replace with your actual Docker image and tag
        ports:
        - containerPort: 5001  # Adjust the port as needed
        # Add any environment variables or volume mounts if necessary
      # Add more containers or volumes if needed
---
apiVersion: v1
kind: Service
metadata:
  name: preprocess-service
spec:
  selector:
    app: preprocess
  ports:
    - protocol: TCP
      port: 5001  # Expose the service on this port
      targetPort: 5001  # Forward traffic to this container port
  type: ClusterIP  # Use NodePort, ClusterIP, or LoadBalancer as per your environment
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ui-ingress
spec:
  rules:
    - host: blood-classification.com  # Replace with your actual domain
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ui-service
                port:
                  number: 80
